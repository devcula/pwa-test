{"version":3,"sources":["components/CardComponent/Card.js","components/CardListComponent/CardList.js","components/SearchBoxComponent/SearchBox.js","components/ScrollComponent/Scroll.js","components/ErrorBoundaryComponent/ErrorBoundary.js","components/MainComponent/MainPage.js","containers/App.js","redux/actionCreator.js","redux/constants.js","redux/reducers.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","length","map","user","i","key","SearchBox","filterFunction","aria-label","type","placeholder","onChange","Scroll","props","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","MainPage","componentDidMount","fetch","then","response","json","users","updateRobots","filteredRobots","filter","robot","toLowerCase","includes","searchField","onSearchChange","App","connect","searchFieldReducer","updateRobotsReducer","dispatch","event","payload","target","value","robotsList","initialSearchFieldState","initialRobotsState","appReducer","combineReducers","action","Object","assign","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","logger","createLogger","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ce07bdb9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email}) => {\n    //const { id, name, email} = props;      //Used Destructuring directly above\n    return(\n        <div className=\"tc bg-light-green br3 ma2 grow dib pa3 bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robo\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card; ","import React from 'react';\nimport Card from '../CardComponent/Card';\n\nconst CardList = ( {robots} ) =>{\n    if(robots.length===0){\n        return (\n            <div>\n                <h1>Nothing found to display</h1>\n            </div>\n        )\n    }\n    else{\n        return(\n            <div>\n                {\n                    robots.map( (user,i) =>{\n                        return (\n                        <Card \n                        key={i} \n                        id = {user.id} \n                        name={user.name} \n                        email={user.email}\n                        />)\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({filterFunction}) => {\n    return (\n        <input \n        aria-label=\"Search Bots\" \n        className=\"sbox\" \n        type=\"search\" \n        placeholder=\"Search Bots\"\n        onChange={filterFunction} \n        />\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = (props)=>{\n    return(\n        <div className=\"scroll\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n\n    render(props){\n        if(this.state.hasError){\n            return <h1>Oops! Something went wrong</h1>\n        }\n        return(\n            this.props.children\n        )\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../CardListComponent/CardList';\nimport SearchBox from '../SearchBoxComponent/SearchBox';\nimport './MainPage.css';\nimport Scroll from '../ScrollComponent/Scroll';\nimport ErrorBoundary from '../ErrorBoundaryComponent/ErrorBoundary';\n\n\nclass MainPage extends Component {\n    \n    componentDidMount = () =>{\n        fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => {\n            return response.json();\n        }).then(users =>{\n            this.props.updateRobots(users);\n        });\n    }\n\n    render(){\n        const { robots } = this.props;\n        const filteredRobots = robots.filter(\n            (robot) => {\n                return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n            }\n        )\n        if(robots.length===0){\n            return (\n                <h1 className=\"tc\">LOADING...</h1>\n            )\n        }\n        else{\n            return(\n                <div className=\"tc\">\n                    <h1>BOT MATES</h1>\n                    <SearchBox filterFunction={this.props.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={ filteredRobots }/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport { setSearchField, updateRobots } from '../redux/actionCreator';\nimport MainPage from '../components/MainComponent/MainPage';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        updateRobots: (robotsList) => dispatch(updateRobots(robotsList))\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchFieldReducer.searchField,\n        robots: state.updateRobotsReducer.robots\n    }\n}\n\nclass App extends Component {\n    render(){\n        return <MainPage {...this.props}/>\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, UPDATE_ROBOTS } from './constants';\n\nexport const setSearchField = (text) =>({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const updateRobots = (robotsList) => ({\n    type: UPDATE_ROBOTS,\n    payload: robotsList\n})","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const UPDATE_ROBOTS = \"UPDATE_ROBOTS\";","import { CHANGE_SEARCH_FIELD, UPDATE_ROBOTS } from './constants';\nimport {combineReducers} from 'redux';\n\nconst initialSearchFieldState = {\n    searchField: \"\"\n}\n\nconst initialRobotsState = {\n    robots: []\n}\n\nconst searchFieldReducer = (state = initialSearchFieldState, action = {}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD :\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst updateRobotsReducer = (state = initialRobotsState, action = {}) => {\n    switch(action.type){\n        case UPDATE_ROBOTS:\n            return Object.assign({}, state, {robots: action.payload});\n        default:\n            return state;\n    }\n}\n\nexport const appReducer = combineReducers({searchFieldReducer, updateRobotsReducer});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { appReducer } from \"./redux/reducers\";\nimport { createLogger } from 'redux-logger';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// const store = createStore( appReducer, applyMiddleware(logger) );\n//Below method is used instead of the first one only to see redux changes in chrome developer tools.\nconst store = createStore( appReducer, composeEnhancers(applyMiddleware(logger)));\n\n ReactDOM.render(<Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}