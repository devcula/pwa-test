{"version":3,"sources":["components/CardComponent/Card.js","components/CardListComponent/CardList.js","components/SearchBoxComponent/SearchBox.js","components/ScrollComponent/Scroll.js","components/ErrorBoundaryComponent/ErrorBoundary.js","containers/App.js","redux/actionCreator.js","redux/constants.js","redux/reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","length","map","user","i","CardComponent_Card","key","SearchBox","filterFunction","type","placeholder","onChange","Scroll","props","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","componentDidMount","fetch","then","response","json","users","updateRobots","_this2","filteredRobots","filter","robot","toLowerCase","includes","searchField","components_SearchBoxComponent_SearchBox","onSearchChange","components_ScrollComponent_Scroll","ErrorBoundaryComponent_ErrorBoundary","CardListComponent_CardList","connect","dispatch","event","payload","target","value","robotsList","initialState","Boolean","window","location","hostname","match","logger","createLogger","store","createStore","arguments","undefined","action","assign","applyMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.960bd948.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email}) => {\n    //const { id, name, email} = props;      //Used Destructuring directly above\n    return(\n        <div className=\"tc bg-light-green br3 ma2 grow dib pa3 bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robo\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card; ","import React from 'react';\nimport Card from '../CardComponent/Card';\n\nconst CardList = ( {robots} ) =>{\n    if(robots.length===0){\n        return (\n            <div>\n                <h1>Nothing found to display</h1>\n            </div>\n        )\n    }\n    else{\n        return(\n            <div>\n                {\n                    robots.map( (user,i) =>{\n                        return (\n                        <Card \n                        key={i} \n                        id = {user.id} \n                        name={user.name} \n                        email={user.email}\n                        />)\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({filterFunction}) => {\n    return (\n        <input \n        className=\"sbox\" \n        type=\"search\" \n        placeholder=\"Search Bots\"\n        onChange={filterFunction} \n        />\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = (props)=>{\n    return(\n        <div className=\"scroll\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n\n    render(props){\n        if(this.state.hasError){\n            return <h1>Oops! Something went wrong</h1>\n        }\n        return(\n            this.props.children\n        )\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardListComponent/CardList';\nimport SearchBox from '../components/SearchBoxComponent/SearchBox';\nimport './App.css';\nimport Scroll from '../components/ScrollComponent/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundaryComponent/ErrorBoundary';\nimport {connect} from 'react-redux';\nimport { setSearchField, updateRobots } from '../redux/actionCreator';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        updateRobots: (robotsList) => dispatch(updateRobots(robotsList))\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchField,\n        robots: state.robots\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount = () =>{\n        fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => {\n            return response.json();\n        }).then(users =>{\n            this.props.updateRobots(users);\n        });\n    }\n\n    render(){\n        const filteredRobots = this.props.robots.filter(\n            (robot) => {\n                return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n            }\n        )\n        if(this.props.robots.length===0){\n            return (\n                <h1 className=\"tc\">LOADING...</h1>\n            )\n        }\n        else{\n            return(\n                <div className=\"tc\">\n                    <h1>BOT MATES</h1>\n                    <SearchBox filterFunction={this.props.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={ filteredRobots }/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, UPDATE_ROBOTS } from './constants';\n\nexport const setSearchField = (text) =>({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const updateRobots = (robotsList) => ({\n    type: UPDATE_ROBOTS,\n    payload: robotsList\n})","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const UPDATE_ROBOTS = \"UPDATE_ROBOTS\";","import { CHANGE_SEARCH_FIELD, UPDATE_ROBOTS } from './constants';\n\nconst initialState = {\n    searchField: \"\",\n    robots: []\n}\n\nexport const appReducer = (state = initialState, action = {}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD :\n            return Object.assign({}, state, {searchField: action.payload});\n        case UPDATE_ROBOTS:\n            return Object.assign({}, state, {robots: action.payload});\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { appReducer } from \"./redux/reducers\";\nimport { createLogger } from 'redux-logger';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst store = createStore( appReducer, applyMiddleware(logger) );\n\n ReactDOM.render(<Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}